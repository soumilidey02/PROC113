# -*- coding: utf-8 -*-
"""PROC113

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xOTVrjJwsyt1wWEudn8O82jXnmje2rZ_
"""

from google.colab import files
data_to_load = files.upload()

import pandas as pd
import statistics
import plotly.express as px
import numpy as np
import csv

df = pd.read_csv("data.csv")
fig = px.scatter(df, y ="quant_saved", color = "wealthy")
fig.show()

import csv

with open("savings_data.csv", newline="")as f:
  reader = csv.reader(f)
  savings_data = list(reader)
  savings_data.pop(0)
  total_entry = len(savings_data)
  total_people_given_a_reminder = 0

  for data in savings_data:
    if int(data[3]) == 1:
      total_people_given_a_reminder += 1

import plotly.graph_objects as go
fig = go.Figure(go.Bar(x = ["reminded", "not reminded"], y = [total_people_given_a_reminder, (total_entry - total_people_given_a_reminder)]))
fig.show()


all_savings = []
for data in savings_data:
  all_savings.append(float(data[0]))
print(f"mean of savings :- {statistics.mean(all_savings)}")
print(f"median of savings :- {statistics.median(all_savings)}")
print(f"mode of savings :- {statistics.mode(all_savings)}")

reminded_savings = []
not_reminded_savings = []

for data in savings_data:
  if int(data[3]) == 1:
    reminded_savings.append(float(data[0]))
  else:
    not_reminded_savings.append(float(data[0]))

print("Result for people who were reminded to save")
print(f"Mean of savings :-{statistics.mean(reminded_savings)}")
print(f"Median of savings :-{statistics.median(reminded_savings)}")
print(f"Mode of savings :-{statistics.mode(reminded_savings)}")

print("\n\n")
print("Result for people who were not reminded to save")
print(f"Mean of savings :-{statistics.mean(not_reminded_savings)}")
print(f"Median of savings :-{statistics.median(not_reminded_savings)}")
print(f"Mode of savings :-{statistics.mode(not_reminded_savings)}")

print(f"standard deviation of all data:- {statistics.stdev(all_savings)}")
print(f"standard deviation of all who were reminded:- {statistics.stdev(reminded_savings)}")
print(f"standard deviation of all who were not reminded:- {statistics.stdev(not_reminded_savings)}")

import seaborn as sns

sns.boxplot(data=df, x=df["quant_saved"])

q1 = df["quant_saved"].quantile(0.25)
q3 = df["quant_saved"].quantile(0.75)
iqr = q3-q1

print(f"Q1 - {q1}")
print(f"Q3 - {q3}")
print(f"IQR - {iqr}")

lower_whisker = q1 - 1.5*iqr
upper_whisker = q3 + 1.5*iqr

print(f"Lower Whisker - {lower_whisker}")
print(f"Upper Whisker - {upper_whisker}")

new_df = df[df["quant_saved"] < upper_whisker]

import plotly.figure_factory as ff

all_savings = new_df["quant_saved"].tolist()

print(f"Mean of savings - {statistics.mean(all_savings)}")
print(f"Median of savings - {statistics.median(all_savings)}")
print(f"Mode of savings - {statistics.mode(all_savings)}")
print(f"Standard deviation in savings - {statistics.stdev(all_savings)}")

fig = ff.create_distplot([new_df["quant_saved"].tolist()], ["Savings"], show_hist=False)
fig.show()

import random

sampling_mean_list = []
for i in range(1000):
  temp_list = []
  for j in range(100):
    temp_list.append(random.choice(all_savings))
  sampling_mean_list.append(statistics.mean(temp_list))

mean_sampling = statistics.mean(sampling_mean_list)

fig = ff.create_distplot([sampling_mean_list], ["Savings"], show_hist=False)
fig.add_trace(go.Scatter(x=[mean_sampling, mean_sampling], y=[0, 0.1], mode="lines", name="mean"))
fig.show()


print(f"Standard deviation of the sampling data - {statistics.stdev(sampling_mean_list)}")
print(f"Mean of Population - {statistics.mean(all_savings)}")
print(f"Mean of Sampling Distribution - {mean_sampling}")

temp_df = new_df[new_df.wealthy != 3]

age = temp_df["wealthy"].tolist()
savings = temp_df["quant_saved"].tolist()

correlation = np.corrcoef(age, savings)
print(f"Correlation between the wealth of the person and their savings is - {correlation[0,1]}")

reminded_df = new_df.loc[new_df["wealthy"] == 1]
not_reminded_df = new_df.loc[new_df["wealthy"] == 0]

print(reminded_df.head())
print(not_reminded_df.head())


fig = ff.create_distplot([not_reminded_df["quant_saved"].tolist()], ["Savings (Not Reminded)"], show_hist=False)
fig.show()

not_reminded_savings = not_reminded_df["quant_saved"].tolist()

sampling_mean_list_not_reminded = []
for i in range(1000):
  temp_list = []
  for j in range(100):
    temp_list.append(random.choice(not_reminded_savings))
  sampling_mean_list_not_reminded.append(statistics.mean(temp_list))

mean_sampling_not_reminded = statistics.mean(sampling_mean_list_not_reminded)
stdev_sampling_not_reminded = statistics.stdev(sampling_mean_list_not_reminded)

print(f"Mean of Sampling (Not Reminded) -> {mean_sampling_not_reminded}")
print(f"Standard Deviation of Sampling (Not Reminded) -> {stdev_sampling_not_reminded}")

fig = ff.create_distplot([sampling_mean_list_not_reminded], ["Savings"], show_hist=False)
fig.add_trace(go.Scatter(x=[mean_sampling, mean_sampling], y=[0, 0.1], mode="lines", name="mean"))
fig.show()

first_std_deviation_start = mean_sampling_not_reminded-stdev_sampling_not_reminded
first_std_deviation_end = mean_sampling_not_reminded+stdev_sampling_not_reminded
print(f"First standard deviation start :- {first_std_deviation_start} and First standard deviation end ::- {first_std_deviation_end}")

second_std_deviation_start = mean_sampling_not_reminded-(2*stdev_sampling_not_reminded)
second_std_deviation_end = mean_sampling_not_reminded+(2*stdev_sampling_not_reminded)
print(f"Second standard deviation start :- {second_std_deviation_start} and Second standard deviation end :- {second_std_deviation_end}")

third_std_deviation_start = mean_sampling_not_reminded-(3*stdev_sampling_not_reminded)
third_std_deviation_end = mean_sampling_not_reminded+(3*stdev_sampling_not_reminded)
print(f"Third standard deviation start :- {third_std_deviation_start} and Third standard deviation end :- {third_std_deviation_end}")

reminded_savings = reminded_df["quant_saved"].tolist()

sampling_mean_list_reminded = []
for i in range(1000):
  temp_list = []
  for j in range(100):
    temp_list.append(random.choice(reminded_savings))
  sampling_mean_list_reminded.append(statistics.mean(temp_list))

mean_sampling_reminded = statistics.mean(sampling_mean_list_reminded)
stdev_sampling_reminded = statistics.stdev(sampling_mean_list_reminded)

print(f"Mean of Sampling of poeple who were reminded -> {mean_sampling_reminded}")
print(f"Standard Deviation of Sampling of people who were reminded -> {stdev_sampling_reminded}")
fig = ff.create_distplot([sampling_mean_list_reminded], ["Savings (Sampling)"], show_hist=False)
fig.add_trace(go.Scatter(x=[mean_sampling, mean_sampling], y=[0, 0.1], mode="lines", name="mean"))
fig.show()

z_score = (mean_sampling_reminded - mean_sampling_not_reminded) / stdev_sampling_not_reminded
print(f"Z-Score is - {z_score}")